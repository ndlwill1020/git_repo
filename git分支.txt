创建分支
git branch dev
上面操作会在当前的commit对象上新建一个名为dev的分支指针，但是仅仅是创建了该分支，并没有切换到dev分支，此时你还在master分支。

切换分支
git checkout dev
此时切换到了新建的dev分支，即HEAD指向了dev分支。

git checkout -b dev
相当于执行
git branch dev
git checkout dev

vim test.py
git add test.py
git commit -m "add test.py"
我们在当前目录下新建了test.py文件，并添加到本地仓库，注意：现在dev分支移动了一格，而master分支还指向原来的commit对象，test.py文件只属于dev分支，master分支并没有该文件。

切换到master分支
git checkout master
可以看到当前目录下是没有test.py文件的。

合并分支
使用dev分支完成一些需求后，需要回到开发主线把它合并到master分支。
git merge dev
ps:需切换到master分支
合并时出现了“Fast-forward”的提示,因为当前master分支所在的提交对象是要并入的分支dev的直接上游，换句话说，如果顺着一个分支直走下去可以到达另一分支的话合并两者时不存在任何需要解决的分歧，只需简单的移动指针，这种合并过程称为“Fast-forward”.
如果不同分支修改了同一文件，合并时可能会遇到冲突，此时Git做了合并，但是并没有提交。使用git status查看哪些文件发生了冲突。解决了所有的冲突后，执行git add将它们添加到暂存区域，因为一旦暂存就表示冲突已解决，然后使用git commit完成这次合并的提交

分支管理
列出当前所有分支的清单
git branch

eg:
dev
* master
master分支前的*字符：表示当前所在的分支。

查看各个分支最后一个提交对象的信息
git branch -v
查看远程分支
git branch -r

origin/HEAD -> origin/master
origin/master

查看已经与当前分支合并的分支
git branch --merged
查看已经与当前分支未合并的分支
git branch --no-merged

创建远程分支,即把本地分支推送到远程
git push origin dev
git branch -r

origin/HEAD -> origin/master
origin/dev
origin/master

同步远程服务器上的数据到本地
git fetch origin

跟踪远程分支
从远程拉取dev分支到本地，并切换到dev分支
git checkout --track origin/dev
从远程拉取dev分支到本地,命名为develop，并切换到develop分支
git checkout -b develop origin/dev

提交本地分支数据到远程服务器
git push origin local:remote

git push origin dev:dev
如果当前是在dev分支下工作，可直接git push





删除分支
git branch -d dev

