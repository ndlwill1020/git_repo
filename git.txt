Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。在Git中，每个版本库都叫做一个仓库(repository)，每个仓库可以简单理解成一个目录，这个目录里面的所有文件都通过Git来实现版本管理，Git都能跟踪并记录在该目录中发生的所有更新。

你的文件可能处于其中之一：已提交(committed)、已修改(modified)和已暂存(staged or index)
已提交表示数据已经安全的保存在本地数据库中。
已修改表示修改了文件，但还没保存到数据库中。
已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中

基本步骤如下：
1、在工作目录中修改文件。
2、暂存文件，将文件的快照放入暂存区域。
3、提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

初次运行Git的命令
设置你的用户名称与邮件地址
$ git config --global user.name "XXX"
$ git config --global user.email XXX@example.com
查看配置信息
$ git config list
可以使用以下命令查看各种操作的帮助文档
$ git help
给操作命令配置别名
$ git config --global alias.co checkout
这样下次，可以使用co代替checkout

Git常用基础命令
1、对现有的某个项目开始用git管理，在该项目所在目录下执行：
$ git init
2、克隆远程仓库的命令：
$ git clone git://github.com/xxxx/xxxx.git
3、如果需要自定义项目名称，可以在后面加上项目名：
$ git clone git://github.com/xxxx/xxxx.git myproj
4、检查当前文件状态
$ git status
5、添加文件到暂存区：
$ git add "filename"
6、列出忽略的文件：
$ cat .gitignore
7、查看已暂存和未暂存的更新：
比较工作区和暂存区的差异：
$ git diff
比较已暂存的文件和上次提交时的差异：
$ git diff --cached or $ git diff --staged
8、提交更新到本地仓库：
加注释说明的提交：
$ git commit -m "xxxxxxxxxx"
跳过暂存区(即跳过git add)来提交：
$ git commit -a -m "xxxxxx"
9、移除文件：
$ git rm "file"
如果想把文件从git仓库删除，但仍希望保留工作区的文件：
$ git rm --cached xxx.file
移动文件(可用于改名)：
$ git mv file_from file_to
10、查看历史提交：
查看提交历史：
$ git log
11、撤销操作
     取消已经暂存的文件
     $ git reset HEAD "filename"
     取消工作区的修改
     $ git checkout -- "filename"
     修正最后一个commit消息
     $ git commit --amend
     这个新的commit会把任何修改的内容和上一次commit的内容结合起来。
     撤销已经commit的提交
     $ git reset --hard HEAD^
12、远程仓库的使用
     查看当前的远程库
     $ git remote
     加上-v显示对应的克隆地址
     添加远程仓库，可以指定一个简单的名字
     $ git remote add [name] [url]
     从远程仓库抓取数据到本地，但并不会自动合并到当前分支
     $ git fetch [remote-name]
     从远程仓库抓取数据并合并到当前分支
     $ git pull
     推送数据到远程仓库
     $ git push
     查看远程仓库信息
     $ git remote show [remote-name]
     移除远程仓库
     $ git remote rm [remotename]
13、打标签
     列出已有的标签
     $ git tag
     新建含附注的标签
     $ git tag -a v1.4 -m 'my version 1.4'
     是存储在仓库中的一个独立对象，拥有自身的校验和信息。
     查看相应标签的信息
     $ git show v1.4
     新建轻量级标签
     $ git tag v1.4
     就是一个保存着对应提交对象的校验和信息的文件。
     推送标签到远程仓库
     $ git push origin v1.5
     加上–tags一次推送所有标签。

Git分支
1、创建分支
$ git branch [name]
2、切换到其他分支
$ git checkout [name]
3、新建分支并切换到该分支
$ git checkout -b [name]
4、合并分支
$ git merge [branch-name]
5、删除分支
$ git branch -d [branch-name]
删除未合并的分支会失败，换成-D就会强制删除。
6、合并冲突
解决冲突后，运行git add把他们标记为已解决。再运行git commit提交。
7、列出当前所有分支，有*符号的代表是当前分支
$ git branch
加上-v参数，将显示各个分支最后一次commit信息。
加上–merge或者–no-merged选项，查看哪些分支已被合并或未合并到当前分支。
8、删除远程分支
$ git push origin :branch-name
9、变基
合并分支有两种，一种是merge，一种是rebase。
$ git checkout branch-dev 
$ git rebase master
or
$ git rebase master branch-dev
       它的原理是回到两个分支（你所在的分支和你想要衍合进去的分支）的共同祖先，提取你所在分支每次提交时产生的差异（diff），把这些差异分别保存到临时文件里，然后从当前分支转换到你需要衍合入的分支，依序施用每一个差异补丁文件。使提交历史更简洁。
我们在更新远程仓库时可以使用如下命令：
$ git pull --rebase
变基注意事项：不要对在你的仓库外有副本的分支执行变基。